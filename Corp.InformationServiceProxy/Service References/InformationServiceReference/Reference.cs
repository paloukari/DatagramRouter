//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corp.InformationServiceProxy.InformationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InformationServiceReference.IInformationServer")]
    public interface IInformationServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationServer/ProcessInformationRequest", ReplyAction="http://tempuri.org/IInformationServer/ProcessInformationRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AntigonisTypes.InformationServerFault), Action="http://tempuri.org/IInformationServer/ProcessInformationRequestInformationServerF" +
            "aultFault", Name="InformationServerFault", Namespace="http://schemas.datacontract.org/2004/07/AntigonisTypes")]
        AntigonisTypes.Information.InformationMessageResponse ProcessInformationRequest(AntigonisTypes.Information.InformationMessageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInformationServer/ProcessInformationRequest", ReplyAction="http://tempuri.org/IInformationServer/ProcessInformationRequestResponse")]
        System.IAsyncResult BeginProcessInformationRequest(AntigonisTypes.Information.InformationMessageRequest request, System.AsyncCallback callback, object asyncState);
        
        AntigonisTypes.Information.InformationMessageResponse EndProcessInformationRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationServer/Ping", ReplyAction="http://tempuri.org/IInformationServer/PingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AntigonisTypes.InformationServerFault), Action="http://tempuri.org/IInformationServer/PingInformationServerFaultFault", Name="InformationServerFault", Namespace="http://schemas.datacontract.org/2004/07/AntigonisTypes")]
        AntigonisTypes.Information.InformationMessageResponse Ping(AntigonisTypes.Information.InformationMessageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IInformationServer/Ping", ReplyAction="http://tempuri.org/IInformationServer/PingResponse")]
        System.IAsyncResult BeginPing(AntigonisTypes.Information.InformationMessageRequest request, System.AsyncCallback callback, object asyncState);
        
        AntigonisTypes.Information.InformationMessageResponse EndPing(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationServerChannel : Corp.InformationServiceProxy.InformationServiceReference.IInformationServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessInformationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessInformationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AntigonisTypes.Information.InformationMessageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AntigonisTypes.Information.InformationMessageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AntigonisTypes.Information.InformationMessageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AntigonisTypes.Information.InformationMessageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationServerClient : System.ServiceModel.ClientBase<Corp.InformationServiceProxy.InformationServiceReference.IInformationServer>, Corp.InformationServiceProxy.InformationServiceReference.IInformationServer {
        
        private BeginOperationDelegate onBeginProcessInformationRequestDelegate;
        
        private EndOperationDelegate onEndProcessInformationRequestDelegate;
        
        private System.Threading.SendOrPostCallback onProcessInformationRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        public InformationServerClient() {
        }
        
        public InformationServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InformationServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ProcessInformationRequestCompletedEventArgs> ProcessInformationRequestCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public AntigonisTypes.Information.InformationMessageResponse ProcessInformationRequest(AntigonisTypes.Information.InformationMessageRequest request) {
            return base.Channel.ProcessInformationRequest(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessInformationRequest(AntigonisTypes.Information.InformationMessageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessInformationRequest(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AntigonisTypes.Information.InformationMessageResponse EndProcessInformationRequest(System.IAsyncResult result) {
            return base.Channel.EndProcessInformationRequest(result);
        }
        
        private System.IAsyncResult OnBeginProcessInformationRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AntigonisTypes.Information.InformationMessageRequest request = ((AntigonisTypes.Information.InformationMessageRequest)(inValues[0]));
            return this.BeginProcessInformationRequest(request, callback, asyncState);
        }
        
        private object[] OnEndProcessInformationRequest(System.IAsyncResult result) {
            AntigonisTypes.Information.InformationMessageResponse retVal = this.EndProcessInformationRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessInformationRequestCompleted(object state) {
            if ((this.ProcessInformationRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessInformationRequestCompleted(this, new ProcessInformationRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessInformationRequestAsync(AntigonisTypes.Information.InformationMessageRequest request) {
            this.ProcessInformationRequestAsync(request, null);
        }
        
        public void ProcessInformationRequestAsync(AntigonisTypes.Information.InformationMessageRequest request, object userState) {
            if ((this.onBeginProcessInformationRequestDelegate == null)) {
                this.onBeginProcessInformationRequestDelegate = new BeginOperationDelegate(this.OnBeginProcessInformationRequest);
            }
            if ((this.onEndProcessInformationRequestDelegate == null)) {
                this.onEndProcessInformationRequestDelegate = new EndOperationDelegate(this.OnEndProcessInformationRequest);
            }
            if ((this.onProcessInformationRequestCompletedDelegate == null)) {
                this.onProcessInformationRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessInformationRequestCompleted);
            }
            base.InvokeAsync(this.onBeginProcessInformationRequestDelegate, new object[] {
                        request}, this.onEndProcessInformationRequestDelegate, this.onProcessInformationRequestCompletedDelegate, userState);
        }
        
        public AntigonisTypes.Information.InformationMessageResponse Ping(AntigonisTypes.Information.InformationMessageRequest request) {
            return base.Channel.Ping(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(AntigonisTypes.Information.InformationMessageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AntigonisTypes.Information.InformationMessageResponse EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AntigonisTypes.Information.InformationMessageRequest request = ((AntigonisTypes.Information.InformationMessageRequest)(inValues[0]));
            return this.BeginPing(request, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            AntigonisTypes.Information.InformationMessageResponse retVal = this.EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(AntigonisTypes.Information.InformationMessageRequest request) {
            this.PingAsync(request, null);
        }
        
        public void PingAsync(AntigonisTypes.Information.InformationMessageRequest request, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        request}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
    }
}
